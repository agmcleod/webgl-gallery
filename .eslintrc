root: true
parser: babel-eslint
rules:
  array-bracket-spacing: 2 # enforce spacing inside array brackets
  arrow-parens: 2 # require parens in arrow function arguments
  arrow-spacing: 2 # require space before/after arrow function's arrow
  block-scoped-var: 2 # treat var statements as if they were block scoped
  brace-style: [2, '1tbs', { 'allowSingleLine': true }] # enforce one true brace style
  comma-spacing: 2 # enforce spacing before and after comma
  comma-style: 2 # enforce one true comma style
  computed-property-spacing: 2 # require or disallow padding inside computed properties
  consistent-return: 2 # require return statements to either always or never specify values
  consistent-this: [2, '_this'] # enforce consistent naming when capturing the current execution context
  constructor-super: 2 # verify calls of super() in constructors
  curly: [2, "all"] # specify curly brace conventions for all control statements
  # default-case: 2 # require default case in switch statements
  dot-location: [2, "property"] # enforces consistent newlines before or after dots
  dot-notation: 2 # encourages use of dot notation whenever possible
  eol-last: 2 # enforce newline at the end of file, with no multiple empty lines
  eqeqeq: 2 # require the use of === and !==
  generator-star-spacing: 2 # enforce spacing around the * in generator functions
  guard-for-in: 2 # make sure for-in loops have an if statement
  indent: [2, 2, {'SwitchCase': 1}] # specify tab or space width for your code
  key-spacing: 2 # enforce spacing between keys and values in object literal properties
  linebreak-style: [2, 'unix'] # disallow mixed 'LF' and 'CRLF' as linebreaks
  max-len: [2, 120, 4, {ignoreComments: false, ignoreUrls: true}] # specify the maximum length of a line in your program
  max-nested-callbacks: [2, 2] # specify the maximum depth callbacks can be nested
  new-cap: 2 # require a capital letter for constructors
  new-parens: 2 # disallow the omission of parentheses when invoking a constructor with no arguments
  newline-after-var: 0 # require or disallow an empty newline after variable declarations. Robin doesn't like this
  no-alert: 2 # disallow the use of alert, confirm, and prompt
  no-array-constructor: 2 # disallow use of the Array constructor
  no-caller: 2 # disallow use of arguments.caller or arguments.callee
  no-class-assign: 2 # disallow modifying variables of class declarations
  no-console: 1
  no-const-assign: 2 # disallow modifying variables that are declared using const
  no-debugger: 1 # display a warning
  no-empty-label: 2 # disallow use of labels for anything other than loops and switches
  no-eq-null: 2 # disallow comparisons to null without a type-checking operator
  no-eval: 2 # disallow use of eval()
  no-extend-native: 2 # disallow adding to native types
  no-extra-bind: 2 # disallow unnecessary function binding
  no-floating-decimal: 2 # disallow the use of leading or trailing decimal points in numeric literals
  no-func-assign: 2 # disallow overwriting functions written as function declarations (recommended)
  no-implied-eval: 2 # disallow use of eval()-like methods
  no-inner-declarations: [2, 'both'] # disallow function or variable declarations in nested blocks (recommended)
  no-iterator: 2 # disallow usage of __iterator__ property
  no-label-var: 2 # disallow labels that share a name with a variable
  no-labels: 2 # disallow use of labeled statements
  no-lone-blocks: 2 # disallow unnecessary nested blocks
  no-lonely-if: 2 # disallow if as the only statement in an else block
  no-loop-func: 2 # disallow creation of functions within loops
  no-mixed-spaces-and-tabs: 2 # disallow mixed spaces and tabs for indentation (recommended)
  no-multi-spaces: 2 # disallow use of multiple spaces
  no-multi-str: 2 # disallow use of multiline strings
  no-multiple-empty-lines: [2, {max: 1}] # disallow multiple empty lines
  no-native-reassign: 2 # disallow reassignments of native objects
  no-nested-ternary: 2 # disallow nested ternary expressions
  no-new-func: 2 # disallow use of new operator for Function object
  no-new-object: 2 # disallow the use of the Object constructor
  no-new-wrappers: 2 # disallows creating new instances of String,Number, and Boolean
  no-new: 2 # disallow use of the new operator when not part of an assignment or comparison
  no-octal-escape: 2 # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  no-param-reassign: 2 # disallow reassignment of function parameters
  no-proto: 2 # disallow usage of __proto__ property
  no-return-assign: 2 # disallow use of assignment in return statement
  no-script-url: 2 # disallow use of javascript urls.
  no-self-compare: 2 # disallow comparisons where both sides are exactly the same
  no-shadow-restricted-names: 2 # disallow shadowing of names such as arguments
  no-shadow: 2 # disallow declaration of variables already declared in the outer scope
  no-spaced-func: 2 # disallow space between function identifier and application
  no-throw-literal: 2 # restrict what can be thrown as an exception
  no-trailing-spaces: 2 # disallow trailing whitespace at the end of lines
  no-undef-init: 2 # disallow use of undefined when initializing variables
  no-undefined: 2 # disallow use of undefined variable
  no-unexpected-multiline: 2 # Avoid code that looks like two expressions but is actually one
  no-unneeded-ternary: 2 # disallow the use of Boolean literals in conditional expressions
  no-unused-expressions: 2 # disallow usage of expressions in statement position
  no-unused-vars: [2, {vars: 'all', args: 'after-used'}] # disallow declaration of variables that are not used in the code (recommended)
  no-use-before-define: 2 # disallow use of variables before they are defined
  no-useless-call: 2 # disallow unnecessary .call() and .apply()
  no-var: 2 # require let or const instead of var
  no-void: 2 # disallow use of the void operator
  no-with: 2 # disallow use of the with statement
  object-curly-spacing: 0 # require or disallow padding inside curly braces
  object-shorthand: [2, 'methods'] # require method and property shorthand syntax for object literals
  one-var: [2, {'uninitialized': 'always'}] # require or disallow one variable declaration per function
  operator-assignment: [2, 'always'] # require assignment operator shorthand where possible or prohibit it entirely
  operator-linebreak: [2, 'after'] # enforce operators to be placed before or after line breaks
  padded-blocks: [2, 'never'] # enforce padding within blocks
  prefer-const: 2 # suggest using const declaration for variables that are never modified after declared
  prefer-reflect: 2 # suggest using Reflect methods where applicable
  prefer-spread: 2 # suggest using the spread operator instead of .apply().
  quote-props: [2, 'consistent-as-needed', {'keywords': true}] # require quotes around object literal property names
  require-yield: 2 # disallow generator functions that do not have yield
  semi-spacing: 2 # enforce spacing before and after semicolons
  semi: [2, 'always'] # require or disallow use of semicolons instead of ASI
  space-after-keywords: 2 # require a space after certain keywords
  space-before-blocks: 2 # require or disallow a space before blocks
  space-in-parens: 2 # require or disallow spaces inside parentheses
  space-infix-ops: 2 # require spaces around operators
  space-return-throw-case: 2 # require a space after return, throw, and case
  space-unary-ops: 2 # require or disallow spaces before/after unary operators
  strict: [2, 'function'] # controls location of Use Strict Directives
  wrap-iife: [2, 'any'] # require immediate function invocation to be wrapped in parentheses
  wrap-regex: 2 # require regex literals to be wrapped in parentheses
  yoda: 2 # require or disallow Yoda conditions
env:
  es6: true
  browser: true
  node: true
extends: 'eslint:recommended'
ecmaFeatures:
  arrowFunctions: true # enable arrow functions
  blockBindings: true #  enable let and const (aka block bindings)
  classes: true # enable classes
  defaultParams: true # enable default function parameters
  destructuring: true # enable destructuring
  # (IMPORTANT: This is an experimental feature that may change significantly in the future. It's recommended that you do not write rules relying on this functionality unless you are willing to incur maintenance cost when it changes.)
  experimentalObjectRestSpread: false # enable support for the experimental object rest/spread properties
  forOf: true # enable for-of loops
  modules: true # enable modules and global strict mode
  objectLiteralComputedProperties: true # enable computed object literal property names
  objectLiteralShorthandMethods: true
  superInFunctions: true # enable super references inside of functions
  spread: true # enable the spread operator for arrays
  templateStrings: true # enable template strings
globals:
  vec3: true
  mat3: true
  mat4: true
  microAjax: true